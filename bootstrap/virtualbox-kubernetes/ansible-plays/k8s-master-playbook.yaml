---
- hosts: all
  become: true
  tasks:      

## Add OS utils
  - debug:
      msg:
      - "The following paramets have been passed:"
      - "node_ip: {{ node_ip }}"
      - "docker_version: {{ docker_version }}"
      - "kubernetes_version: {{ kubernetes_version }}"
      - "host_sync_folder: {{ host_sync_folder }}"

  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      
## Install Docker and its dependent components
## Ref.: https://docs.docker.com/engine/install/ubuntu/
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
      validate_certs: True

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce={{ docker_version }}
      - docker-ce-cli={{ docker_version }}
      - containerd.io ## version will be derived from docker-ce, latest tested version is v1.4.3 (269548fa27e0089a8b8278fc4fc781d7f65a939b)
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker


## Disable swap on system if active, to be able to start k8s
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

## Install k8s utils i.e. kubelet, kubeadm and kubectl

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet={{ kubernetes_version }}
        - kubeadm={{ kubernetes_version }}
        - kubectl={{ kubernetes_version }}

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      create: yes

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
 
## Initialize the Kubernetes cluster with kubeadm (applicable only on master node)
  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16

    
## Setup the kube config file for the vagrant user, so that one is able to access the Kubernetes cluster
  - name: Setup kubeconfig for vagrant user
    shell: |
      mkdir -p /home/vagrant/.kube 
      \cp /etc/kubernetes/admin.conf /home/vagrant/.kube/config 
      chown vagrant:vagrant /home/vagrant/.kube/config


  - name: Copy kubeconfig to Host synced folder
    shell: |
      mkdir -p {{ host_sync_folder }}/.kube
      \cp /etc/kubernetes/admin.conf {{ host_sync_folder }}/.kube/config
      chown vagrant:vagrant {{ host_sync_folder }}/.kube/config


## Setup the container networking provider and the network policy engine	 
## Ref.: https://docs.projectcalico.org/getting-started/kubernetes/self-managed-onprem/onpremises
  - name: Install calico pod network
    become: false
    command: kubectl create -f https://docs.projectcalico.org/v3.17/manifests/calico.yaml

## Generate kube join command for joining the node to the Kubernetes cluster and store the command
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

## Status check on Docker Deamon
  handlers:
    - name: docker status
      service: name=docker state=started
      
## ToDo: install CNI Plugin to enable container login via proxy
## Ref.: https://docs.projectcalico.org/getting-started/kubernetes/hardway/install-cni-plugin
